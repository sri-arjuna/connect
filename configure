#!/usr/bin/env bash
#	Yet Another Simple Script Installer
# ------------------------------------------------------------------------
#
#	Created:	2015.07.27
#	Changed:	2015.08.22
	script_name=configure
	script_version=0.9.5
#
#	Description:
#		This script automaticly, according to passed options, 
#		generates the following files, named to go along with GNU Automake terminology.
#		* make-install
#		* make-uninstall
#		* make-distclean
#		
#		The options were applied from the output of GNU Automake's './configure --help'
#		and the calculation of the paths is done according to: http://www.pathname.com/fhs/
#
#		This is not about auto magic compiling,
#		this is about simply placing files.
#
#
#	To report bugs or suggestions about YASSI (configure), please raise an issue on:
#		https://github.com/sri-arjuna/yassi/issues
#	or send me an email.
#
# ------------------------------------------------------------------------
#
# Copyright (c) 2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Internal Variables
#
	unset FHS POST PRIOR REMOVE
	declare -A FHS
	declare -a POST
	declare -a PRIOR
	declare -a REMOVE
	
	APP=""
	doRef=false
	doTarball=false
	is_at_home=false
	SOURCE="./$script_name.cfg"
	#LOG="${PWD:-$(pwd)}/make-install.log"		# Not yet used, see lines 214 + 215 for most important application
	install_prefix="sudo "
	
	mandirs="$(echo man{1..9}dir)"
	index_list="prefix bindir sbindir sysconfdir datarootdir datadir docdir htmldir infodir $mandirs compldir sharedstatedir localstatedir"
	variable_list="";for i in $index_list;do variable_list+=" ${i^^}";done
	source "$SOURCE"
#
#	Functions
#
	show_sample() {
	# Prints a sample configure.cfg
	# and exits
		cat <<-EOF
			APP=projectname
			APP_REQUIRES="awk bash grep sed"
			BINDIR=bin
			DOCDIR="docs/README.md docs/COPYING"
			#MAN1DIR=docs/man1/\*.1
			#INFODIR=tex/\$APP.info
			DATADIR="./templates ./extra"
			ISSUE="https://github.com/sri-arjuna/yassi/issues"
		EOF
		exit 0
	}
	show_sample_full() {
	# Prints a sample configure.cfg
	# and exits
		cat <<-EOF
			# Project information
			# Used for /usr/share/\$APP & /usr/share/doc/\$APP
			APP=projectname
			APP_REQUIRES="awk bash grep sed"
			# Used for helpscreen & tarball
			APP_VER=0.1
			# If set overwrites /usr/local for plain './configure' invocation
			APP_DIR=~/local
			
			# Directories
			# A plain dirname will copy all its content
			# Single entries must not be quoted!
			BINDIR=bin
			# A plain filename will copy just the file
			# The $APP.{info,html} files will be generated by the PRIOR[1|2] array entry.
			# Multiple entries shall be quoted.
			DOCDIR="docs/README.md docs/COPYING docs/tex/\$APP.html"
			MAN1DIR=docs/man1
			INFODIR=docs/tex/\$APP.info
			# A dirname with a leading ./ will copy the directory
			DATADIR="./templates ./themes"
			
			# Set true to install the reference file to /etc/\$APP.conf
			doRef=false
			
			# Contact
			BUGS="your@email.com"
			ISSUE="https://github.com/sri-arjuna/yassi/issues"
			
			# Specials
			# Do things before copying/installing
			PRIOR[0]="texi2any -o docs/tex/\$APP.info --no-split docs/tex/\$APP.texi"
			PRIOR[1]="texi2any --html -o docs/tex/\$APP.html --no-split docs/tex/\$APP.texi"
			
			# Do things after copying/installing
			POST[0]=post_script1.sh
			POST[1]="echo \"Thank you for choosing '\$APP'!\""
			
			# Append this in the uninstall script.
			REMOVE[0]="rm docs/tex/\$APP.html docs/tex/\$APP.info"
		EOF
		exit 0
	}
	show_help() {
	# Prints the helpscreen
	# and exits
		MSG_TR_CONTACT_INFO="$( [ ! -z "$BUGS" ] && echo -e "\n\tReport bugs of \"$APP\" to \"$BUGS\"")
	$( [ ! -z "$ISSUE" ] && echo "Report bugs of \"$APP\" on \"$ISSUE\"")
"	
		
		MSG_TR_HELP="Usage:	./$script_name [options]
Routine to configure the installation of ${APP:-APPNAME} ${APP_VER:-[APP_VER]}

Options:
	-h|--help		Shows this screen and exits
	--version		Shows the version and exits
	--sample		Prints a sample 'configure.cfg' required by projects and exits
	--sample-full		Prints an advanced sample 'configure.cfg' required by projects and exits
	--tarball		Configures ${APP:-APPNAME}, runs PRIOR tasks and saves the folder as tarball, then exits
	
	--prefix DIR		Sets the prefix to DIR		(default: ${APP_DIR:-/usr/local})
	
	--bindir DIR		user executeables 		(\$PREFIX/bin)
	--sbindir DIR		admin executeables		(\$PREFIX/sbin)
	--sysconfdir DIR	read-only single-machine data 	(\$PREFIX/etc)
	--datarootdir DIR	read-only arch.-independent data root 	(\$PREFIX/share)
	
	--datadir DIR		read-only architecture-independent data (\$DATAROOTDIR/${APP:-APPNAME})
	--docdir DIR		project documentation root	(\$DATAROOTDIR/doc/${APP:-APPNAME})
	--htmldir DIR		project documentation root	(\$DOCDIR)
	--infodir DIR		info documentation		(\$DATAROOTDIR/info)
	
	--compldir DIR		bash completion			(\$DATAROOTDIR/bash-completion/completions)
	--localedir		locale-dependent data		(\$DATAROOTDIR/locale)
	--localstatedir		modifiable single-machine data	(\$PREFIX/var)
	
	--man1dir DIR		man 1 Exe & Shell commands	(\$DATAROOTDIR/man/man1)
		2) System calls		3) Library calls	4) Special files (eg /dev)
		5) File formats & conventions (eg: /etc/passwd)	6) Games
		7) Miscellaneous (eg: macros, groff)		8) Root commands (sbin)
	--man9dir DIR		man 9 Kernel routines (non standard)	(\$DATAROOTDIR/man/man9)
	
	--sharedstatedir	modifiable architecture-independent	(\$PREFIX/com)
	$MSG_TR_CONTACT_INFO"
		echo "$MSG_TR_HELP"
		exit 99
	}
	show_version() {
	# Prints the version of the script
	# and exits
		MSG_TR_VERSION="(sea) $script_name, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Report bugs of $script_name to: https://github.com/sri-arjuna/yassi/issues
"
		echo "$MSG_TR_VERSION"
		exit 111
	}
	write_files() { 
	# Write the different types of make-{distclean,install,uninstall} scripts
	#
		write_install() { # INDEX CONTENT
		# Prints the copy commands
		#
			echo "mkdir -p \"${FHS[${1,,}]}\""
			if [ -d "$2" ] && [ ! "./" = "${2:0:2}" ]
			then	# Its a directory, go recursive
				echo "cp -ar \"${PWD:-$(pwd)}/$2/\"* \"${FHS[${1,,}]}\" || exit 1" | sed s,"//","/",g
			else	tmp_check="${2##*/}"
				check_char="${tmp_check:0:1}"
				isAsterix=$(printf '%s' "$check_char" | grep -v '*' && echo false || echo true )
				
				case "$isAsterix" in
				true|false)	isAsterix=$isAsterix	;;
				*)		isAsterix=false		;;
				esac
				
				if $isAsterix
				then 	echo "cp -ar \"${PWD:-$(pwd)}/$(dirname ${2})/\"$tmp_check \"${FHS[${1,,}]}\" || exit 1" | sed s,"//","/",g
				else	echo "cp -a \"${PWD:-$(pwd)}/$2\" \"${FHS[${1,,}]}\" || exit 1" | sed s,"//","/",g
				fi
			fi
		}
		write_reference() { # INDEX
		# Prints the index reference used
		#
			echo "${1}=${FHS[${1,,}]}"  | sed s,"//","/",g
		}
		write_uninstall() { # INDEX CONTENT
		# Prints the remove commands
		#
			INDEX="$1" ; shift
			DEST="${FHS[${INDEX,,}]}"
			
			for tr in ${@}
			do	case "$INDEX" in
				SBINDIR|BINDIR|MAN[1-9]DIR)
					if [ -d "${tr}" ]
					then	for e in "./$tr/"*
						do 	[ -d "$e" ] && \
								echo "rm -fr $DEST/${e##*/}" || \
								echo "rm -f $DEST/${e##*/}"
						done
					else	echo "rm -f $DEST/${tr##*/}"
					fi
					;;
				COMPLDIR)
					tr="${tr/\$\{APP\}/$APP}"
					echo "rm -f $DEST/${tr##*/}"
					;;
				*)	[ -d "$tr" ] && \
						echo "rm -fr $DEST/${tr##*/}" || \
						echo "rm -f $DEST/${tr##*/}"
					;;
				esac
			done
			return 0
		}
		write_distclean() { 
		# Remove the files that where created
		#
			echo "(sleep 0.5 ; rm -f ./make-* ; rm -f \"$REFERENCE\" ) &"
		}
		
		# Prepare script headers
		for m in install uninstall distclean
		do	echo "#!/usr/bin/env sh" > "make-$m"
			if [ ! "$m" = "distclean" ] && $is_at_home 
			then	printf '%s\n' \
					"[ -z \$UID ] && UID=0" \
					"[ \$UID -ne 0 ] && \\" \
					"	echo \"This script requires root access.\" && \\" \
					"	exit 99"  >> "make-$m"
			elif [ ! "$m" = "distclean" ]
			then	echo "set -x" >> "make-$m"
			fi
			chmod +x "make-$m"
		done
		$is_at_home && FHS[prefix]="$prefix_home"
		echo "prefix=${FHS[prefix]}">"$REFERENCE"
		
		# Write content of PRIOR tasks, if any
		if [ ! -z "$(echo ${PRIOR[@]})" ]
		then	C=0
			echo >> "make-install"
			while [ ! -z "${PRIOR[$C]}"  ]
			do 	echo "${PRIOR[$C]}" >> "make-install" # || exit 1"
				((C++))
			done
		fi
		
		# Search for the available/used variables
		for index in $variable_list
		do	# Expand index
			tmp="${!index}"
			# Count words
			num=$(echo $tmp | wc -w)
			
			# Only do something if index has content count higher than 0
			if [ "$num" -gt 0 ]
			then	# 'Group' different tasks 
				echo >> "make-install"
				echo >> "make-uninstall"
				
				# It has content
				write_reference "$index" >> "$REFERENCE"
				case "$num" in
				1)	write_install "$index" "$tmp" >> "make-install"
					write_uninstall "$index" "$tmp" >> "make-uninstall"
					;;
				*)	for s in $(echo "$tmp"|sed s,\",,g)
					do 	write_install "$index" "$s" >> "make-install"
						write_uninstall "$index" "$s" >> "make-uninstall"
					done
					;;
				esac
			fi
		done
		source "$PWD/$REFERENCE"
		
		# Check for removal operations
		if [ ! -z "$(echo ${REMOVE[@]})" ]
		then 	C=0
			echo >> "make-install"
			
			while 	item="${REMOVE[$C]}"
				[ ! -z "$item" ]
			do 	[ -f "$item" ] && \
					echo "sh ./$item" >> "make-uninstall" || \
					echo "$item" >> "make-uninstall" #  || exit 1
				((C++))
			done
		fi
		
		# Finalize
		write_distclean >> "make-distclean"
		if [ "true" = "${doRef:-false}" ]
		then	echo >> "make-install"
			echo "mkdir -p ${FHS[sysconfdir]} ; cp \"$REFERENCE\" \"${FHS[sysconfdir]}/$APP.conf\"" >> "make-install"
			echo "rm -f ${FHS[sysconfdir]}/$APP.conf" >> "make-uninstall"
		fi
		
		# Check for post operations, letter better here, than with 'set -s'
		if [ ! -z "$(echo ${POST[@]})" ]
		then 	C=0
			echo >> "make-install"
			while 	item="${POST[$C]}"
				[ ! -z "$item" ]
			do 	[ -f "$item" ] && \
					echo "sh ./$item" >> "make-install" || \
					echo "$item" >> "make-install" # || exit 1
				((C++))
			done
		fi
		for m in install uninstall
		do	echo >> "make-$m"
			printf '%s\n' \
				"RET=\$?" \
				"set +x" >> "make-$m"
		done
		
		echo "echo;echo \"Finished installation of $APP\";exit \$RET" >> "make-install"	# with exit code: \$RET (0=success)\""
		#sed s,'set -x','',g -i make-{uni,i}nstall
		
		sed s,'set -x',"set -x\nSYSCONFDIR=$SYSCONFDIR",g -i make-{uni,i}nstall
		sed s,'~',"$HOME",g -i make-{uni,i}nstall
	}
#
#	Get options
#
	GETOPT=$(getopt \
		--options	"h" \
		--longoptions	"help,version,sample,sample-full,tarball,bindir:,sbindir:,prefix:,datarootdir:,datadir:,infodir:,man[1-9]dir:,localedir:,docdir:,compldir:,sharedstatedir:,localstatedir:,localedir:" \
		--name 		"${0##*/}" -- "${@}"
	)
	eval set -- "$GETOPT"
	while true
	do 	case "$1" in
		-h|--help)	show_help	;;
		--version)	show_version	;;
		--sample)	show_sample	;;
		--sample-full)	show_sample_full;;
		--prefix|--bindir|--sbindir|--datarootdir|--datadir|\
		--infodir|--sysconfdir|--man[1-9]dir|--docdir|--htmldir|\
		--compldir|--sharedstatedir|--localstatedir|--localedir)
				FHS["${1/--}"]="$2"
				shift 2		;;
		--tarball)	doTarball=true
				shift 		;;
		--)		shift ; break	;;
		esac
	done
	[ -z "$APP" ] && echo "Missing APP name..." && exit 1
	REFERENCE="${APP}_dirs.conf"
#
#	Prepare paths
#
	for index in $index_list
	do
		tmp="${FHS[$index]}"
		etc_done=false
		if [ -z "$tmp" ]
		then	case "$index" in
			prefix)		tmp="${APP_DIR:-/usr/local}"	;;
			"bindir")	tmp="${FHS[prefix]}/bin"	;;
			"sbindir")	tmp="${FHS[prefix]}/sbin"	;;
			sysconfdir)	tmp_prefix="${FHS[prefix]}"
					case "$tmp_prefix" in
					"/"|"/usr")
						tmp="/etc"		;;
					*)	if $is_at_home
						then	tmp="$HOME/.local/etc"
						else	tmp="${FHS[prefix]}/etc"
						fi
						;;
					esac ; etc_done=true				;;
			datarootdir)	tmp="${FHS[prefix]}/share"	;;
			datadir)	tmp="${FHS[datarootdir]}/$APP"	;;
			infodir)	tmp="${FHS[datarootdir]}/info"	;;
			man[0-9]dir)	tmp="${FHS[datarootdir]}/man/${index:0:4}" ;;
			localedir)	tmp="${FHS[datarootdir]}/locale" ;;
			docdir)		tmp="${FHS[datarootdir]}/doc/$APP" ;;
			htmldir)	tmp="${FHS[docdir]}" ;;
			compldir)	tmp="${FHS[datarootdir]}/bash-completion/completions"	;;
			sharedstatedir)	tmp="${FHS[prefix]}/com"	;;
			localstatedir)	tmp="${FHS[prefix]}/var"	;;
			esac
			if [ "$index" = "prefix" ] && ! $etc_done
			then	# Do special handling
					[ "~" = "${tmp:0:1}" ] && tmp="${tmp/~/$HOME}"
					if [ "${tmp:0:${#HOME}}" = "$HOME" ] #|| [ "$tmp" ~= ^"~" ]
					then	is_at_home=true
						install_prefix=""
						prefix_home="${{tmp/~/$HOME}/$HOME}"
						tmp="$prefix_home"
					fi
			fi
			FHS["$index"]="$tmp"
		fi
	done
#
#	Prepare installation script
#
	write_files
	APP_REQUIRES=""
	source "$SOURCE";missing=""
	for req in $APP_REQUIRES;do
		which $req 2>/dev/zero 1>&2 || missing+=" $req"
	done
	[ ! -z "$missing" ] && \
		printf '%s\n' "Please provide these commands before installing $APP!" "::-->> ${missing}" && \
		exit 1
	
#
#	Output
#
	if $doTarball
	then	tmp_p=$(pwd)
		tmp_dir=$(dirname $tmp_p)
		[ -z "$APP_VER" ] && \
			VERSION="" || \
			VERSION="_${APP_VER}"
		./configure --prefix="${FHS[prefix]}"
		source "$REFERENCE"
		for t in "${PRIOR[@]}"
		do 	(set -x ; $t )
		done
		tarball="../${APP}$VERSION.tar.gz"
		tar -acf "$tarball" * && \
			echo "Successfully created tarball ${tarball}!"
	else	echo
		echo "The installation script has been configured to ${FHS[prefix]}."
		echo "To install \"$APP\" now, please execute: '${install_prefix}./make-install'"
		echo
	fi
	exit