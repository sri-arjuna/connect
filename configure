#!/bin/bash
#
#	Description:	Generates a simple 'make-install' script 
#			a basic FHS conform installation
#
#	Created:	2015.07.27
#	Changed:	2015.08.02
	script_name=./configure
	script_version=0.4
#
# ------------------------------------------------------------------------
#
# Copyright (c) 2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Internal Variables
#
	APP=""
	doRef=false
	unset FHS
	SOURCE="$0.cfg"
	declare -A FHS
	index_list="prefix bindir sbindir sysconfdir datarootdir datadir docdir infodir man1dir man8dir compldir"
	variable_list="";for i in $index_list;do variable_list+=" ${i^^}";done
	
#
#	Functions
#
	show_help() {
	# Prints the helpscreen
	# and exits
		MSG_TR_HELP="Usage:	$script_name [options]
Options:
	-h|--help		Shows this screen and exits
	--version		Shows the version and exits
	
	--prefix DIR		Sets the prefix to DIR		(default: /usr/local)
	--bindir DIR		Sets the bindir to DIR 		(\$PREFIX/bin)
	--sbindir DIR		Sets the sbindir to DIR 	(\$PREFIX/sbin)
	--sysconfdir DIR	Sets the sysconfdir to DIR 	(\$PREFIX/etc)
	
	--datarootdir DIR	Sets the datarootdir to DIR 	(\$PREFIX/share)
	--datadir DIR		Sets the datadir to DIR 	(\$DATAROOTDIR/$APP)
	--docdir DIR		Sets the docdir to DIR 		(\$DATAROOTDIR/doc/$APP)
	
	--infodir DIR		Sets the infodir to DIR 	(\$DATAROOTDIR/info)
	--man1dir DIR		Sets the mandir to DIR 		(\$DATAROOTDIR/man/man1)
	--man8dir DIR		Sets the mandir to DIR 		(\$DATAROOTDIR/man/man8)
	--compldir DIR		Sets the (bash)compldir to DIR 	(\$DATAROOTDIR/bash-completion/completions)
	"
		echo "$MSG_TR_HELP"
		exit 99
	}
	show_version() {
	# Prints the version of the script
	# and exits
		MSG_TR_VERSION="(sea) $script_name, Version $script_version
Copyright (C) $(date +'%Y') Simon Arjuna, Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
"
		echo "$MSG_TR_VERSION"
		exit 111
	}
	write_files() { 
	# Write the different types of make-{distclean,install,uninstall} scripts
	#
		write_install() { # INDEX CONTENT
		# Prints the copy commands
		#
			echo "mkdir -p \"${FHS[${1,,}]}\""
			if [ -d "$2" ] && [ ! "./" = "${2:0:2}" ]
			then	echo "cp -ar \"$2/\"* \"${FHS[${1,,}]}\"" | sed s,"//","/",g
			elif [ -e  "$2" ]
			then	echo "cp -ar \"$2\" \"${FHS[${1,,}]}\"" | sed s,"//","/",g
			fi
		}
		write_reference() { # INDEX
		# Prints the index reference used
		#
			echo "${1}=${FHS[${1,,}]}"  | sed s,"//","/",g
		}
		write_uninstall() { # INDEX CONTENT
		# Prints the remove commands
		#
			INDEX="$1" ; shift
			DEST="${FHS[${INDEX,,}]}"
			
			#echo "DEST: $DEST // content: $@"
			for tr in $@
			do	case "$INDEX" in
				SBINDIR|BINDIR|MAN[18]DIR)
					if [ -d "${tr}" ]
					then	for e in "./$tr/"*
						do 	[ -d "$e" ] && \
								echo "rm -fr $DEST/${e##*/}" || \
								echo "rm -f $DEST/${e##*/}"
						done
					else	echo "rm -f $DEST/${tr##*/}"
					fi
					;;
				COMPLDIR)
					echo " --- $tr --- " >&2
					tr="${tr/\$\{APP\}/$APP}"
					echo "rm -f $DEST/${tr##*/}"
					;;
			#	INFODIR)
			#		echo $content
			#		;;
				*)	[ -d "$tr" ] && \
						echo "rm -fr $DEST/${tr##*/}" || \
						echo "rm -f $DEST/${tr##*/}"
					;;
				esac
			done
			return 0
		}
		write_distclean() { 
		# Remove the files that where created
		#
			echo "(sleep 0.5 ; rm -f ./make-* ; rm -f $REFERENCE ) &"
			#rm "./${script_name}.cfg"
		}
		
		# Prepare script headers
		for m in install uninstall distclean
		do	echo "#!/bin/sh" > "make-$m"
			[ ! "$m" = "distclean" ] && \
				printf '%s\n' \
					"[ \$UID -ne 0 ] && \\" \
					"	echo \"This script requires root access.\" && \\" \
					"	exit 99" \
					"set -x" >> "make-$m"
			chmod +x "make-$m"
		done
		$doRef && >"$REFERENCE"
		
		# Search for the available variables
		for index in $variable_list
		do	tmp=$(awk -F= -v VAR="$index" '$1 ~ "^[^#]*" VAR "$"{print $2}' "$SOURCE")
			num=$(echo $tmp | wc -w)
			if [ "$num" -gt 0 ]
			then	# It has content
				$doRef && write_reference "$index" >> "$REFERENCE"
				case "$num" in
				1)	write_install "$index" "$tmp" >> "make-install"
					write_uninstall "$index" "$tmp" >> "make-uninstall"
					;;
				*)	for s in $(echo "$tmp"|sed s,\",,g)
					do 	write_install "$index" "$s" >> "make-install"
						write_uninstall "$index" "$s" >> "make-uninstall"
					done
					;;
				esac
			fi
		done
		
		# Finalize
		write_distclean >> "make-distclean"
		if $doRef 
		then	echo "mkdir -p ${FHS[sysconfdir]} ; cp $REFERENCE ${FHS[sysconfdir]}/$APP.conf" >> "make-install"
			echo "rm -f ${FHS[sysconfdir]}/$APP.conf" >> "make-uninstall"
		fi
		for m in install uninstall
		do	printf '%s\n' \
				"RET=\$?" \
				"set +x" >> "make-$m"
		done
		echo "echo \"Finished installation of $APP with exit code: \$RET (0=success)\"" >> "make-install"
	}
#
#	Get options
#
	# -a|--alternative ; to allow longoptions with a single leading '-'
	GETOPT=$(getopt \
		--options	"h" \
		--longoptions	"help,version,bindir:,sbindir:,prefix:,datarootdir:,bindir:,bindir:,bindir:,bindir:,bindir:,bindir:" \
		--name 		"${0##*/}" -- "${@}"
	)
	eval set -- "$GETOPT"
	while true
	do 	case "$1" in
		-h|--help)	show_help	;;
		--version)	show_version	;;
		--prefix|--bindir|--sbindir|--datarootdir|\
		--datadir|--infodir|--sysconfdir|--man1dir|--man8dir|--docdir|--compldir)
				FHS["${1/--}"]="$2"
				shift 2		;;
		--)		shift ; break	;;
		esac
	done
	source "$SOURCE" ; [ -z "$APP" ] && exit 1
	REFERENCE="${APP}_ref.conf"
#
#	Prepare paths
#
	for index in $index_list
	do
		tmp="${FHS[$index]}"
		if [ -z "$tmp" ]
		then	case "$index" in
			prefix)		tmp="/usr/local"		;;
			bindir)		tmp="${FHS[prefix]}/bin"	;;
			sbindir)	tmp="${FHS[prefix]}/sbin"	;;
			sysconfdir)	case "${FHS[prefix]}" in
					"/"|"/usr")
						tmp="/etc"		;;
					*)	tmp="${FHS[prefix]}/etc";;
					esac				;;
			datarootdir)	tmp="${FHS[prefix]}/share"	;;
			datadir)	tmp="${FHS[datarootdir]}/$APP"	;;
			infodir)	tmp="${FHS[datarootdir]}/info"	;;
			man1dir)	tmp="${FHS[datarootdir]}/man/man1" ;;
			man8dir)	tmp="${FHS[datarootdir]}/man/man8" ;;
			docdir)		tmp="${FHS[datarootdir]}/doc/$APP" ;;
			compldir)	tmp="${FHS[datarootdir]}/bash-completion/completions"
			esac
		fi
		FHS["$index"]="$tmp"
	done
#
#	Prepare installation script
#
	write_files
#
#	Output
#
	echo
	echo "The installation script has been configured to ${FHS[prefix]}."
	echo "To install \"$APP\" now, please execute: ./make-install"
	echo
	exit